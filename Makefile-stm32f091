#/*****************************************************************************
#* Copyright Â© 2019-2020 Mike Sharkey <mike@8bitgeek.net>                     *
#*                                                                            *
#* Permission is hereby granted, free of charge, to any person obtaining a    *
#* copy of this software and associated documentation files (the "Software"), *
#* to deal in the Software without restriction, including without limitation  *
#* the rights to use, copy, modify, merge, publish, distribute, sublicense,   *
#* and/or sell copies of the Software, and to permit persons to whom the      *
#* Software is furnished to do so, subject to the following conditions:       *
#*                                                                            *
#* The above copyright notice and this permission notice shall be included in *
#* all copies or substantial portions of the Software.                        *
#*                                                                            *
#* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *
#* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   *
#* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    *
#* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER *
#* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    *
#* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        *
#* DEALINGS IN THE SOFTWARE.                                                  *
#*****************************************************************************/
TARGET=ezapp-stm32f091

MCU_CHIP     = stm32f091
MCU_BOARD    = pa2500
MCU_CORE     = cortex-m0
MCU_FLOAT    = soft
CORTEX_VER   = v6-m

# tools
CARIBOU_RTOS = ~/Documents/GitHub/caribou-rtos
GCC_ROOT     = /opt/gcc-arm-none-eabi-8-2018-q4-major/bin
PREFIX       = $(GCC_ROOT)/arm-none-eabi-
GCC_LIB      = /../lib/gcc/arm-none-eabi/8.2.1

OPENOCD_STLINK_CFG = /usr/local/share/openocd/scripts/interface/stlink.cfg 
OPENOCD_STM32_CFG  = /usr/local/share/openocd/scripts/target/stm32f0x.cfg

CC=$(PREFIX)gcc
CXX=$(PREFIX)g++
LD=$(PREFIX)gcc
DB=$(PREFIX)gdb
AR=$(PREFIX)ar
AS=$(PREFIX)as
CP=$(PREFIX)objcopy
OD=$(PREFIX)objdump
SZ=$(PREFIX)size
LS=./ezapp/ld/$(TARGET).ld 

# Paths

APP          = ./ezapp/src/platform/$(MCU_CHIP)-$(MCU_BOARD)
EZBUS_TL     = ./src

CHIP 		 = $(CARIBOU_RTOS)/caribou/target/chip/stm32/$(MCU_CHIP)
STM32_LIB	 = $(CHIP)/lib

CHIP_LIB         		= $(STM32_LIB)
CHIP_LIB_SRC     		= $(CHIP_LIB)/src
CHIP_LIB_INCLUDE 		= $(CHIP_LIB)/include

LIB_CMSIS 				= $(CHIP_LIB)/CMSIS
LIB_CMSIS_INCLUDE 		= $(LIB_CMSIS)/Include

CHIP_LIB_CMSIS	 		= $(LIB_CMSIS)/ST/STM32F0xx
CHIP_LIB_CMSIS_INCLUDE	= $(CHIP_LIB_CMSIS)/Include

INC +=  -I ./
INC += -I ./ezapp/src 
INC += -I ./ezapp/src/platform/$(MCU_CHIP)-$(MCU_BOARD)
INC += -I ./src -I ./src/mac -I ./src/common -I ./src/socket -I ./src/platform
INC += -I $(LIB_CMSIS_INCLUDE)
INC += -I $(CHIP_LIB_INCLUDE) 
INC += -I $(CHIP_LIB_CMSIS_INCLUDE)
INC += -I $(CARIBOU_RTOS)/caribou/include
INC += -I $(CARIBOU_RTOS)/caribou/target/chip/stm32/stm32f091/include/stm32f091rc
INC += -I $(CARIBOU_RTOS)/caribou/target/cpu/arm/cortex-m0
INC += -I $(CARIBOU_RTOS)/caribou++/include

# libararies

LIBS += $(GCC_ROOT)$(GCC_LIB)/thumb/$(CORTEX_VER)/nofp/libgcc.a
LIBS += $(GCC_ROOT)$(GCC_LIB)/../../../../arm-none-eabi/lib/thumb/$(CORTEX_VER)/nofp/libm.a
# LIBS += $(GCC_ROOT)$(GCC_LIB)/../../../../arm-none-eabi/lib/thumb/$(CORTEX_VER)/nofp/libstdc++.a
LIBS += $(GCC_ROOT)$(GCC_LIB)/../../../../arm-none-eabi/lib/thumb/$(CORTEX_VER)/nofp/libstdc++_nano.a

# flags

CFLAGS_COMMON += $(INC)
CFLAGS_COMMON += -Os 
#CFLAGS_COMMON += -ggdb 
CFLAGS_COMMON += -fdata-sections -ffunction-sections
CFLAGS_COMMON += -DUSE_FULL_ASSERT=1 -DUSART_QUEUE_SZ=128 -D_CARIBOU_RTOS_=1 -DENC28J60_USE_DMA=1
CFLAGS_COMMON += -Wall -Wno-unused-function -Wno-nonnull-compare -fno-builtin -Wno-unused-but-set-variable
CFLAGS_COMMON += -fshort-enums -fsigned-char -mlittle-endian -mthumb -mthumb-interwork -mcpu=$(MCU_CORE) -mfloat-abi=$(MCU_FLOAT) -DSTM32F091xx=1
CFLAGS_COMMON += -fsingle-precision-constant -ffunction-sections 
CFLAGS_COMMON += -Wno-double-promotion -Wno-attributes 
CFLAGS_COMMON += -Wfloat-conversion 
CFLAGS_COMMON += -nostartfiles -nostdlib -c


CFLAGS += $(CFLAGS_COMMON)
CFLAGS += -std=gnu99 -Wno-implicit-function-declaration 

CXXFLAGS += $(CFLAGS_COMMON)

ASFLAGS	+= -mlittle-endian -mthumb -mthumb-interwork -mcpu=$(MCU_CORE)

LFLAGS += -Wl,-T,$(LS) -Wl,-Map=$(TARGET).map -Wl,--gc-sections -Wl,-ereset_handler

# ** CARIBOU

SRCS_CC += $(CARIBOU_RTOS)/caribou/src/dev/adc.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/dev/gpio.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/dev/i2c.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/dev/i2s.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/dev/spi.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/dev/uart.c


SRCS_CC += $(CARIBOU_RTOS)/caribou/src/kernel/caribou.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/kernel/interrupt.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/kernel/ipc.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/kernel/thread.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/kernel/timer.c

SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/bitmap_heap.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/bytequeue.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/caribou_ftoa.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/cbmath.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/errno.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/heap.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/mutex.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/nova_heap.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/qsort.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/queue.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/rand.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/semaphore.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/spinlock.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/stdio.c
SRCS_CC += $(CARIBOU_RTOS)/caribou/src/lib/string.c

#SRCS_CC += $(CARIBOU_RTOS)/caribou/target/cpu/arm/$(MCU_CORE)/cpu/cpu.c

# SRCS_CC += $(CHIP_LIB_SRC)/stm32l4xx_hal_adc.c
# SRCS_CC += $(CHIP_LIB_SRC)/stm32l4xx_hal_tim.c
SRCS_CC += $(CHIP_LIB_SRC)/stm32f0xx_rcc.c
SRCS_CC += $(CHIP_LIB_SRC)/stm32f0xx_usart.c 	


SRCS_CC += $(CHIP)/src/chip.c
# SRCS_CC += $(CHIP)/src/fault.c
SRCS_CC += $(CHIP)/src/gpio.c
SRCS_CC += $(CHIP)/src/uart.c



# ** APP

SRCS_CC += $(APP)/fault.c
SRCS_CC += $(APP)/system_stm32f0xx.c		
SRCS_CC += $(APP)/board.c
SRCS_CC += $(APP)/main.c

SRCS_AS += $(APP)/crt0.S
SRCS_AS += $(APP)/vectors.S


# ** EZBUS_TL

SRCS_CC += $(EZBUS_TL)/ezbus.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_token.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_boot0.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_boot1.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_boot2.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_arbiter.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_arbiter_receive.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_arbiter_transmit.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_transmitter.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_receiver.c
SRCS_CC += $(EZBUS_TL)/mac/ezbus_mac_peers.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_fault.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_address.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_crc.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_crc32.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_hex.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_log.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_packet.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_parcel.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_platform.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_port.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_peer.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_flip.c
SRCS_CC += $(EZBUS_TL)/common/ezbus_timer.c
SRCS_CC += $(EZBUS_TL)/socket/ezbus_socket.c
SRCS_CC += $(EZBUS_TL)/socket/ezbus_socket_common.c
SRCS_CC += $(EZBUS_TL)/socket/ezbus_socket_callback.c

OBJS_CXX := $(SRCS_CXX:.cpp=.o)
OBJS_CC  := $(SRCS_CC:.c=.o)
OBJS_AS  := $(SRCS_AS:.S=.o)

$(TARGET): $(TARGET).elf

$(TARGET).elf: $(OBJS_CXX) $(OBJS_CC) $(OBJS_AS)
	$(LD) $(LFLAGS) -o $@ $^ $(LIBS) 
	$(CP) -O ihex $(TARGET).elf $(TARGET).hex
	$(CP) -O srec $(TARGET).elf $(TARGET).srec
	$(SZ) $(TARGET).elf

%.o : %.S %.h
	$(AS) $(ASFLAGS) -o $@  $<

%.o : %.c %.h
	$(CC) $(CFLAGS) -o $@ $<

%.o : %.cpp %.h
	$(CXX) $(CXXFLAGS) -o $@ $<

clean:
		rm -f $(OBJS_CXX) $(OBJS_CC) $(OBJS_AS) $(TARGET).elf $(TARGET).bin $(TARGET).hex $(TARGET).srec $(TARGET).map

flash: $(TARGET).elf
		openocd -f $(OPENOCD_STLINK_CFG) -f $(OPENOCD_STM32_CFG) -c "program $(TARGET).elf verify reset exit"

debug: $(TARGET).elf
	openocd -f $(OPENOCD_STLINK_CFG) -f $(OPENOCD_STM32_CFG) &
	$(DB) -quiet -tui -x ./gdbinit

kill:
	killall openocd
